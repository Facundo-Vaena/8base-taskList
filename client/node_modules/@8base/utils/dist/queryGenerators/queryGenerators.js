"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTableRowDeleteTag = exports.createTableRowQueryTag = exports.createTableRowUpdateTag = exports.createTableRowCreateTag = exports.createTableFilterGraphqlTag = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var R = _interopRequireWildcard(require("ramda"));

var _schemaNameGenerator = require("@8base/schema-name-generator");

var tableSelectors = _interopRequireWildcard(require("../selectors/tableSelectors"));

var _createQueryObject = require("./createQueryObject");

var _transformQueryObjectToString = require("./transformQueryObjectToString");

var upperFirst = function upperFirst(str) {
  return R.toUpper(R.head(str)) + R.tail(str);
};

var getTableByName = function getTableByName(tablesList, tableName) {
  return tablesList.find(function (_ref) {
    var name = _ref.name;
    return tableName === name;
  });
};

var createQueryString = function createQueryString(tablesList, tableName) {
  var queryStringConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var prevSpaceCount = queryStringConfig.prevSpaceCount,
      spaceCount = queryStringConfig.spaceCount,
      rest = (0, _objectWithoutProperties2.default)(queryStringConfig, ["prevSpaceCount", "spaceCount"]);
  var gueryObject = (0, _createQueryObject.createQueryObject)(tablesList, tableName, (0, _objectSpread2.default)({}, rest));
  return (0, _transformQueryObjectToString.transformQueryObjectToString)(gueryObject, {
    prevSpaceCount: prevSpaceCount,
    initSpaceCount: spaceCount,
    spaceCount: spaceCount
  });
};

var createTableFilterGraphqlTag = function createTableFilterGraphqlTag(tablesList, tableName) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return "\n  query ".concat(upperFirst(tableName), "TableContent(\n    $filter: ").concat(_schemaNameGenerator.SchemaNameGenerator.getFilterInputTypeName(tableName), "\n    $orderBy: [").concat(_schemaNameGenerator.SchemaNameGenerator.getOrderByInputTypeName(tableName), "]\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $skip: Int\n  ) {\n    ").concat(config.tableContentName ? "".concat(config.tableContentName, ": ") : '').concat(_schemaNameGenerator.SchemaNameGenerator.getTableListFieldName(tableName), "(\n      filter: $filter\n      orderBy: $orderBy\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      skip: $skip\n    ) {\n      items {\n        id").concat(createQueryString(tablesList, tableName, (0, _objectSpread2.default)({}, config, {
    prevSpaceCount: 6
  })), "\n        _description\n      }\n      count\n    }\n  }");
};

exports.createTableFilterGraphqlTag = createTableFilterGraphqlTag;

var createTableRowCreateTag = function createTableRowCreateTag(tablesList, tableName) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var table = getTableByName(tablesList, tableName);
  var hasNonMetaFields = tableSelectors.hasNonMetaFields(table);

  if (hasNonMetaFields) {
    return "\n  mutation DataViewer".concat(upperFirst(tableName), "RowCreate($data: ").concat(_schemaNameGenerator.SchemaNameGenerator.getCreateInputName(tableName), "!) {\n    ").concat(_schemaNameGenerator.SchemaNameGenerator.getCreateItemFieldName(tableName), "(data: $data) {\n      id").concat(createQueryString(tablesList, tableName, (0, _objectSpread2.default)({
      withMeta: false
    }, config)), "\n    }\n  }");
  }

  return "\n  mutation DataViewer".concat(upperFirst(tableName), "RowCreate {\n    ").concat(_schemaNameGenerator.SchemaNameGenerator.getCreateItemFieldName(tableName), " {\n      id").concat(createQueryString(tablesList, tableName, (0, _objectSpread2.default)({
    withMeta: false
  }, config)), "\n    }\n  }");
};

exports.createTableRowCreateTag = createTableRowCreateTag;

var createTableRowUpdateTag = function createTableRowUpdateTag(tablesList, tableName) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return "\n  mutation DataViewer".concat(upperFirst(tableName), "RowUpdate($data: ").concat(_schemaNameGenerator.SchemaNameGenerator.getUpdateInputName(tableName), "!) {\n    ").concat(_schemaNameGenerator.SchemaNameGenerator.getUpdateItemFieldName(tableName), "(data: $data) {\n      id").concat(createQueryString(tablesList, tableName, (0, _objectSpread2.default)({
    withMeta: false
  }, config)), "\n    }\n  }");
};

exports.createTableRowUpdateTag = createTableRowUpdateTag;

var createTableRowQueryTag = function createTableRowQueryTag(tablesList, tableName) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return "\n  query DataViewer".concat(upperFirst(tableName), "Row($id: ID!) {\n    ").concat(_schemaNameGenerator.SchemaNameGenerator.getTableItemFieldName(tableName), "(id: $id) {").concat(createQueryString(tablesList, tableName, (0, _objectSpread2.default)({}, config)), "\n    }\n  }");
};

exports.createTableRowQueryTag = createTableRowQueryTag;

var createTableRowDeleteTag = function createTableRowDeleteTag(tablesList, tableName) {
  return "\n  mutation DataViewer".concat(upperFirst(tableName), "RowDelete($data: ").concat(_schemaNameGenerator.SchemaNameGenerator.getDeleteInputName(tableName), "!) {\n    ").concat(_schemaNameGenerator.SchemaNameGenerator.getDeleteItemFieldName(tableName), "(data: $data) {\n      success\n    }\n  }");
};

exports.createTableRowDeleteTag = createTableRowDeleteTag;