"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createQueryColumnsList = void 0;

var R = _interopRequireWildcard(require("ramda"));

var tableFieldSelectors = _interopRequireWildcard(require("../selectors/tableFieldSelectors"));

var getTableByName = function getTableByName(tablesList, tableName) {
  return tablesList.find(function (_ref) {
    var name = _ref.name;
    return tableName === name;
  });
};

var capitalizeFirstLetter = function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

var createQueryColumnsList = function createQueryColumnsList(tablesList, tableName) {
  var queryObjectConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var prevKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

  var _ref2 = getTableByName(tablesList, tableName) || {},
      _ref2$fields = _ref2.fields,
      fields = _ref2$fields === void 0 ? [] : _ref2$fields;

  var _queryObjectConfig$de = queryObjectConfig.deep,
      deep = _queryObjectConfig$de === void 0 ? 3 : _queryObjectConfig$de,
      _queryObjectConfig$wi = queryObjectConfig.withMeta,
      withMeta = _queryObjectConfig$wi === void 0 ? false : _queryObjectConfig$wi,
      includeColumns = queryObjectConfig.includeColumns;
  var transformedList = fields.filter(function (field) {
    var isMeta = tableFieldSelectors.isMetaField(field);
    var isIdField = tableFieldSelectors.isIdField(field);

    if (isIdField) {
      return false;
    }

    return withMeta ? true : !isMeta;
  }).map(function (field) {
    var fieldName = tableFieldSelectors.getFieldName(field);
    var fieldType = tableFieldSelectors.getFieldType(field);
    var fieldTypeAttributes = tableFieldSelectors.getFieldTypesAttributes(field);
    var isRelation = tableFieldSelectors.isRelationField(field);
    var isFile = tableFieldSelectors.isFileField(field);
    var isList = tableFieldSelectors.isListField(field);
    var refTableName = tableFieldSelectors.getRelationTableName(field);
    var currentKeyString = prevKey ? "".concat(prevKey, ".").concat(fieldName) : fieldName;
    var title = prevKey ? "".concat(prevKey, ".").concat(capitalizeFirstLetter(fieldName)) : capitalizeFirstLetter(fieldName);
    var refTable = getTableByName(tablesList, refTableName);
    var meta = {
      isList: isList,
      fieldType: fieldType,
      fieldTypeAttributes: fieldTypeAttributes
    };

    if (isFile) {
      return [{
        name: currentKeyString,
        title: title,
        meta: meta
      }];
    } else if (isRelation && isList) {
      return [{
        name: currentKeyString,
        title: title,
        meta: meta
      }];
    } else if (isRelation && refTableName && refTable && deep > 1) {
      var innerKeys = createQueryColumnsList(tablesList, refTableName, {
        deep: deep - 1,
        withMeta: withMeta,
        includeColumns: includeColumns
      }, currentKeyString);
      return innerKeys;
    } else if (isRelation) {
      return [{
        name: currentKeyString,
        title: title,
        meta: meta
      }];
    }

    return [{
      name: currentKeyString,
      title: title,
      meta: meta
    }];
  });
  return R.flatten(transformedList).filter(function (_ref3) {
    var name = _ref3.name;
    return !!includeColumns ? R.contains(name, includeColumns) : true;
  });
};

exports.createQueryColumnsList = createQueryColumnsList;