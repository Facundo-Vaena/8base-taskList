"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createQueryObject = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var R = _interopRequireWildcard(require("ramda"));

var tableFieldSelectors = _interopRequireWildcard(require("../selectors/tableFieldSelectors"));

var _constants = require("../constants");

var DEFAULT_DEPTH = 1;

var getTableByName = function getTableByName(tablesList, tableName) {
  return tablesList.find(function (_ref) {
    var name = _ref.name;
    return tableName === name;
  });
};

var emptyRelation = {
  id: 'id',
  _description: '_description'
};
var emptyRelationList = {
  items: {
    id: 'id',
    _description: '_description'
  },
  count: 'count'
};

var createQueryObject = function createQueryObject(tablesList, tableName) {
  var queryObjectConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var prevKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

  var _ref2 = getTableByName(tablesList, tableName) || {},
      _ref2$fields = _ref2.fields,
      fields = _ref2$fields === void 0 ? [] : _ref2$fields;

  var _queryObjectConfig$de = queryObjectConfig.deep,
      deep = _queryObjectConfig$de === void 0 ? DEFAULT_DEPTH : _queryObjectConfig$de,
      _queryObjectConfig$wi = queryObjectConfig.withMeta,
      withMeta = _queryObjectConfig$wi === void 0 ? true : _queryObjectConfig$wi,
      includeColumns = queryObjectConfig.includeColumns;
  var queryObject = {};
  fields.filter(function (field) {
    var isMeta = tableFieldSelectors.isMetaField(field);
    return withMeta ? true : !isMeta;
  }).forEach(function (field) {
    var fieldContent = field.name;
    var isRelation = tableFieldSelectors.isRelationField(field);
    var isFile = tableFieldSelectors.isFileField(field);
    var isSmart = tableFieldSelectors.isSmartField(field);
    var isList = tableFieldSelectors.isListField(field);
    var refTableName = tableFieldSelectors.getRelationTableName(field);
    var refTable = getTableByName(tablesList, refTableName);

    var isSettingsRefTable = tableFieldSelectors.getRelationTableName(field) === _constants.SYSTEM_TABLES.SETTINGS;

    var currentKeyString = prevKey ? "".concat(prevKey, ".").concat(field.name) : field.name;

    if (isSettingsRefTable) {
      fieldContent = {
        _description: '_description'
      };
    } else if (isRelation) {
      if (deep > 1) {
        if (!!refTableName && !!refTable) {
          var includeAllrelationFields = R.contains(currentKeyString, includeColumns || []);
          var relationIncludeColumns = includeAllrelationFields ? null : includeColumns;
          fieldContent = (0, _objectSpread2.default)({
            id: 'id'
          }, createQueryObject(tablesList, refTableName, {
            deep: deep - 1,
            withMeta: withMeta,
            includeColumns: relationIncludeColumns
          }, currentKeyString), {
            _description: '_description'
          });
        } else {
          fieldContent = {
            id: 'id',
            _description: '_description'
          };
        }
      } else {
        fieldContent = {
          id: 'id',
          _description: '_description'
        };
      }
    } else if (isFile) {
      fieldContent = {
        id: 'id',
        fileId: 'fileId',
        filename: 'filename',
        downloadUrl: 'downloadUrl',
        shareUrl: 'shareUrl',
        meta: 'meta'
      };
    } else if (isSmart) {
      fieldContent = field.fieldTypeAttributes.innerFields.reduce(function (accum, _ref3) {
        var name = _ref3.name;
        accum[name] = name;
        return accum;
      }, {});
    }

    if (isList && (isRelation || isFile) && fieldContent !== null) {
      fieldContent = {
        items: fieldContent,
        count: 'count'
      };
    }

    var isNotEmptyRelation = isRelation && !R.equals(fieldContent, emptyRelation) && !R.equals(fieldContent, emptyRelationList);
    var needsInclude = !!includeColumns ? R.contains(currentKeyString, includeColumns) : true;

    if (fieldContent !== null && (needsInclude || isNotEmptyRelation)) {
      queryObject[field.name] = fieldContent;
    }
  });
  return queryObject;
};

exports.createQueryObject = createQueryObject;